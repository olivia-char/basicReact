'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mockBrowser = require('mock-browser');

var _mockBrowser2 = _interopRequireDefault(_mockBrowser);

var _ = require('../');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

try {
  window;
} catch (e) {
  var MockBrowser = _mockBrowser2.default.mocks.MockBrowser;
  global.window = MockBrowser.createWindow();
}

describe('History', function () {

  it('set method', function () {
    var h = new _2.default('foo');
    h.set('bar');
    expect(window.location.hash).toEqual('#foo=bar');
  });

  it('get method', function () {
    var h = new _2.default('foo');
    h.set('bar');
    expect(h.get()).toEqual('bar');
  });

  it('get from previously set url', function () {
    window.location.href = 'about:blank#foo=bar2';
    var h = new _2.default('foo');
    expect(h.get()).toEqual('bar2');
  });

  it('fires a change event when the right part of the url changes', function (done) {
    window.location.href = 'about:blank#foo=bar2';
    var spy = jasmine.createSpy('spy');
    var h = new _2.default('foo').on('change', spy);
    setTimeout(function () {
      window.location.href = 'about:blank#foo=bar99';
      setTimeout(function () {
        expect(spy.calls.count()).toEqual(1);
        done();
      }, 20);
    }, 20);
  });

  it('does not fire a change event when an irrelevant part of the url changes', function (done) {
    window.location.href = 'about:blank#foo=1&bar=2';
    var spy = jasmine.createSpy('spy');
    var h = new _2.default('foo').on('change', spy);
    setTimeout(function () {
      window.location.href = 'aboute:blank#foo=1&bar=3';
      setTimeout(function () {
        expect(spy.calls.count()).toEqual(0);
        done();
      }, 20);
    }, 20);
  });
});

exports.default = {};