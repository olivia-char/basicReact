'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ = require('../');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

describe('addProperties', function () {
  it('create an object with fluent properties', function () {
    var O = function O() {
      _classCallCheck(this, O);

      (0, _.addProperties)(this, 'colour', 'size', 'flavour');
    };

    var o = new O().colour('red').size('small').flavour('cherry');
    expect(o.colour()).toEqual('red');
    expect(o.size()).toEqual('small');
    expect(o.flavour()).toEqual('cherry');
  });
});

describe('addGetters', function () {
  it("creates getters for 'hidden' properties (names starting with underscore)", function () {
    var O = function O() {
      _classCallCheck(this, O);

      this._colour = 'blue';
      this._size = 'large';
      this._flavour = 'apple';
      (0, _.addGetters)(this, 'colour', 'size', 'flavour');
    };

    var o = new O();
    expect(o.colour()).toEqual('blue');
    expect(o.size()).toEqual('large');
    expect(o.flavour()).toEqual('apple');
  });
});

describe('addEvents', function () {
  it('creates events on an object', function () {
    var O = function () {
      function O() {
        _classCallCheck(this, O);

        (0, _.addEvents)(this, 'change');
      }

      _createClass(O, [{
        key: 'changeSomething',
        value: function changeSomething() {
          this.fire('change');
        }
      }]);

      return O;
    }();

    var o = new O();
    var spy = jasmine.createSpy('spy');
    o.on('change', spy);
    o.changeSomething();
    expect(spy.calls.count()).toEqual(1);
  });

  it('add events in two separate places to build up multiple events', function () {
    var O = function () {
      function O() {
        _classCallCheck(this, O);

        (0, _.addEvents)(this, 'change');
        (0, _.addEvents)(this, 'load');
      }

      _createClass(O, [{
        key: 'changeSomething',
        value: function changeSomething() {
          this.fire('change');
        }
      }, {
        key: 'load',
        value: function load() {
          this.fire('load');
        }
      }]);

      return O;
    }();

    var o = new O();

    var spy = jasmine.createSpy('spy');
    o.on('change', spy);
    o.changeSomething();
    expect(spy.calls.count()).toEqual(1);

    var spy2 = jasmine.createSpy('spy2');
    o.on('load', spy2);
    o.load();
    expect(spy2.calls.count()).toEqual(1);
  });
});

exports.default = {};