'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (object) {
  if (!object[DISPATCHERS]) {
    object[DISPATCHERS] = {};
  }

  var dispatchersByEventName = object[DISPATCHERS];

  // if we're trying to add an event which already exists, then
  // throw an error

  for (var _len = arguments.length, events = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    events[_key - 1] = arguments[_key];
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var event = _step.value;

      if (Object.keys(dispatchersByEventName).includes(event)) {
        throw new Error('Trying to add event twice - ' + event);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var dispatcher = _d3Dispatch.dispatch.apply(null, events);

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = events[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _event = _step2.value;

      dispatchersByEventName[_event] = dispatcher;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  function eventName(type) {
    return type.split('.').shift();
  }

  object.on = function (type, handler) {
    dispatchersByEventName[eventName(type)].on(type, handler);
    return object;
  };

  object.fire = function (type) {
    var _dispatchersByEventNa;

    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    (_dispatchersByEventNa = dispatchersByEventName[eventName(type)]).call.apply(_dispatchersByEventNa, [type, object].concat(args));
  };
};

var _d3Dispatch = require('d3-dispatch');

var DISPATCHERS = Symbol('dispatchers'); // adds events to the supplied object